[{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://jakobschumacher.github.io/dividefairly/Readme.html","id":null,"dir":"","previous_headings":"","what":"What’s this package costsplitter about?","title":"What’s this package costsplitter about?","text":"package splits costs group activity. example: go hiking friends whole group costs need divided. Somebody pays stay another one food. end need split fairly. many cases can split evenly. sometimes can unfair. somebody leave early? somebody participated activities? somebody booked bed couldnt show ? person earns less others like chip ? children eat less full grown adult? R package tries balance problems fair distribution. Friendship great","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/Readme.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What’s this package costsplitter about?","text":"","code":"# Install devtools first install.packages(\"devtools\")  # Install the package from github devtools::install_github(github.com/jakobschumacher/costsplitter)  # Start using the package library(costsplitter)"},{"path":"http://jakobschumacher.github.io/dividefairly/Readme.html","id":"how-to-use-this-package","dir":"","previous_headings":"","what":"How to use this package","title":"What’s this package costsplitter about?","text":"convinced package something ? want give try? Go ahead. Follow following steps divide costs activity fair amongst participants First prepare input files. tricky part undertaking. need two files collect information need. Fortunately can use files also planning group activity - next time start group activity write information acording following scheme. participants.csv file. csv file. 4 types columns file: person columns (something like id, name age), grouping columns (usually called group), cost columns (start prefix cost_ continue name cost) lastely adjustment column (called adjustment). can look example file participants.csv costs.csv file. file contains costs. One column must id, one column must name cost one column contain actual cost. can look example file costs.csv analysis. easy part. input files structured right way, need run: : reads files, checks files structured right way, changes categorical values numerical values, calculates weight based age, adjustment grade involvement. end gives amount everybody needs pay money paid.","code":"divide_fairly(participants_file = \"link_to_participants_file.csv\", costs_file = \"link_to_costs_file.csv\")"},{"path":[]},{"path":"http://jakobschumacher.github.io/dividefairly/articles/divide-costs-fairly-amongst-friends.html","id":"function-to-check-the-costsplitter-data","dir":"Articles","previous_headings":"This is the documentation of all functions of the package","what":"Function to check the costsplitter data","title":"Divide costs fairly amongst friends","text":"helper function reads data participant file","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(stringr) data <- data.frame(   name = c(\"Alice\", \"Bob\", \"Charlie\"),   pay_breakfast = c(20, 0, 10),   share_breakfast = c(1, \"half\", \"full\"),   age = c(30, \"kid\", NA),   adjustment = c(\"more\", NA, \"less\") )  check_costsplitter_data(data) #>      name pay_breakfast share_breakfast  age adjustment #> 1   Alice            20               1   30       more #> 2     Bob             0            half  kid       <NA> #> 3 Charlie            10            full <NA>       less"},{"path":"http://jakobschumacher.github.io/dividefairly/articles/divide-costs-fairly-amongst-friends.html","id":"function-to-change-the-categorical-values-to-numerical-values","dir":"Articles","previous_headings":"This is the documentation of all functions of the package","what":"Function to change the categorical values to numerical values","title":"Divide costs fairly amongst friends","text":"helper function used check_costsplitter_data function. cost variables accept categorical values. categorical values need turned numeric values","code":"data_participants = check_costsplitter_data() |> cat_to_num()"},{"path":"http://jakobschumacher.github.io/dividefairly/articles/divide-costs-fairly-amongst-friends.html","id":"function-to-minimize-payments-between-payers-and-recievers","dir":"Articles","previous_headings":"This is the documentation of all functions of the package","what":"Function to minimize payments between payers and recievers","title":"Divide costs fairly amongst friends","text":"helper function. people recieve money others need pay money. need match payers recievers. try reduce number overall payments.","code":"df <- dplyr::tibble(   element = c(\"Brown\", \"Smith\", \"Fisher\", \"Taylor\", \"Davis\", \"Johnson\", \"Wilson\", \"ORally\"),   to_pay = c(-995, -125, -80,  210, 245, 300, 365, 80) )  minimize_payments(df) #> # A tibble: 6 × 3 #>   payer   receiver amount #>   <chr>   <chr>     <dbl> #> 1 ORally  Fisher       80 #> 2 Wilson  Brown       365 #> 3 Johnson Brown       300 #> 4 Davis   Brown       245 #> 5 Taylor  Brown        85 #> 6 Taylor  Smith       125"},{"path":"http://jakobschumacher.github.io/dividefairly/articles/divide-costs-fairly-amongst-friends.html","id":"function-to-give-you-amount-each-has-to-pay","dir":"Articles","previous_headings":"This is the documentation of all functions of the package","what":"Function to give you amount each has to pay","title":"Divide costs fairly amongst friends","text":"","code":"result <- costsplitter(pay_by = \"group\")"},{"path":"http://jakobschumacher.github.io/dividefairly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakob Schumacher. Author, maintainer.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schumacher J (2024). costsplitter: Divide Costs Fairly Amongst Friends. R package version 0.5.","code":"@Manual{,   title = {costsplitter: Divide Costs Fairly Amongst Friends},   author = {Jakob Schumacher},   year = {2024},   note = {R package version 0.5}, }"},{"path":"http://jakobschumacher.github.io/dividefairly/index.html","id":"whats-this-package-costsplitter-about","dir":"","previous_headings":"","what":"Divide Costs Fairly Amongst Friends","title":"Divide Costs Fairly Amongst Friends","text":"package costsplitter R package designed simplify complex task splitting costs group activities. evenly dividing expenses among participants straightforward many situations, real-world scenarios often require nuanced approach. package costsplitter addresses various factors can complicate cost-sharing: Partial participation (e.g., leaving early joining late) Involvement select activities Unused reservations -shows Income disparities among group members Age-based consumption differences (e.g., children vs. adults) considering variables, costsplitter calculates fair distribution expenses, ensuring participant contributes amount proportional involvement circumstances. Whether ’re planning hiking trip, shared vacation, group event shared costs, costsplitter offers sophisticated solution often challenging task equitable expense allocation.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Divide Costs Fairly Amongst Friends","text":"","code":"# Install the package from github devtools::install_github(github.com/jakobschumacher/costsplitter)"},{"path":"http://jakobschumacher.github.io/dividefairly/index.html","id":"step-1-prepare-the-data","dir":"","previous_headings":"","what":"Step 1: Prepare the data","title":"Divide Costs Fairly Amongst Friends","text":"convinced package something ? want give try? Go ahead. Follow following steps divide costs activity fair amongst participants First prepare input files. tricky part undertaking. need data correct format, otherwise function work correctly. Use spreadsheet can also helpful planning group activity. data conatin following columns: name column. column indicates names person involved. must column otherwise package throw error. names must unique. pay_ columns. columns hold amount somebody paid one activity. least one pay_ column must available. pay_ columns either start pay_ string given var_pay. everything slightly complicated want match pay_column share_columns. must done corresponding part _ e.g. pay_breakfastand share_breakfast. value numeric. share_columns. columns hold share everyone pay activity. share_ columns either start share_ string given var_share. second part name _ must correspond pay_column. value can numeric 0 (meaning hove pay) 1 (pays full share) can also hold categorical values full reduced half . categorical values transformed numerical values. corresponding value can controlled function arguments value_full, value_reduced, value_half value_some respectively. NA values empty values translated 0. group column. Several persons can put together form group. can indicated column. age column. column indicates age persons involved. value integer value 0 120. value also either adult kid, translated 1 0.5 respectively. NA values empty values translated 1. adjustment column. give general bonus malus apply complete amount somebody pay can use adjustment column. column can numeric 0 (indicating pay) 100 (indicating 100x times normal share). value can also categorical indicating person pay 1.2 times less indicating person pay 0.8 usual amount. NA values empty values translated 1. example suitable dataset.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/index.html","id":"step-2-do-the-analysis","dir":"","previous_headings":"","what":"Step 2: Do the analysis","title":"Divide Costs Fairly Amongst Friends","text":"easy part. input files structured right way, need run: : reads files, checks files structured right way, changes categorical values numerical values, calculates weight based age, adjustment grade involvement. end gives amount everybody needs pay money paid. example analysis many features controlled","code":"# Load the package library(costsplitter)  # Read in the data data <- read.csv('your_data_set.csv')  # Do the analysis costsplitter(data) # Load the package library(costsplitter)  # Read in the data data <- read.csv('your_data_set.csv')  # Do the analysis costsplitter(data,     var_share = \"payindicator_\", # Replacing the *share_* to *payindicator_*     use_adjustment = FALSE, # Explicitly state that no adjustment should be used     use_age = TRUE, # Explicitly stating that age should be used     value_kid = 0.8) # Setting the percentage what kids should pay"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/cat_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Categorical Values to Numeric — cat_to_num","title":"Convert Categorical Values to Numeric — cat_to_num","text":"function converts various categorical values within dataset numeric values, particularly cost shares age adjustments, per parameters provided. processes specific columns like age adjustment create numeric equivalents, enabling analysis computation within costsplitter package.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/cat_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Categorical Values to Numeric — cat_to_num","text":"","code":"cat_to_num(   data = check_costsplitter_data(),   age_adjustment = (1/18),   share_adult = 1,   share_kid = 0.5,   share_full = 1,   share_reduced = 0.7,   share_less = 0.8,   share_more = 1.2 )"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/cat_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Categorical Values to Numeric — cat_to_num","text":"data data frame, typically output check_costsplitter_data(), containing cost participant information. Defaults check_costsplitter_data() provided. age_adjustment numeric value used scale age values proportions. Default 1/18. share_adult numeric value indicating proportion adults. Default 1. share_kid numeric value indicating proportion kids. Default 0.5. share_full numeric value representing full share participants. Default 1. share_reduced numeric value representing reduced share participants. Default 0.7. share_less numeric value representing discounted share applied participants \"less\" category. Default 0.8. share_more numeric value representing increased share applied participants \"\" category. Default 1.2.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/cat_to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Categorical Values to Numeric — cat_to_num","text":"data frame transformed numeric values age, adjustment, relevant columns.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/cat_to_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Categorical Values to Numeric — cat_to_num","text":"function handles several transformations: Categorical values cost columns (e.g., \"full\", \"reduced\") converted numeric. Age values translated based adult kid patterns English German. adjustment column converted numeric based predefined categories like \"\" \"less.\"","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/cat_to_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Categorical Values to Numeric — cat_to_num","text":"","code":"data_participants = check_costsplitter_data() |> cat_to_num()"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/check_costsplitter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the dataset for conformity with costsplitter prerequisites — check_costsplitter_data","title":"Check the dataset for conformity with costsplitter prerequisites — check_costsplitter_data","text":"function checks whether given dataset conforms expected format requirements costsplitter package. ensures presence validity required columns name, pay_, share_, group, age, adjustment.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/check_costsplitter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the dataset for conformity with costsplitter prerequisites — check_costsplitter_data","text":"","code":"check_costsplitter_data(   data = readr::read_csv(system.file(\"participants.csv\", package = \"costsplitter\"),     show_col_types = FALSE),   var_pay = \"pay_\",   var_share = \"share_\",   value_full = 1,   value_reduced = 0.8,   value_half = 0.5,   value_some = 0.3 )"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/check_costsplitter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the dataset for conformity with costsplitter prerequisites — check_costsplitter_data","text":"data data frame containing cost-sharing data. var_pay string indicating prefix payment columns (default \"pay_\"). var_share string indicating prefix share columns (default \"share_\"). value_full numeric value representing full share (default 1). value_reduced numeric value representing reduced share (default 0.8). value_half numeric value representing half share (default 0.5). value_some numeric value representing partial share (default 0.3).","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/check_costsplitter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the dataset for conformity with costsplitter prerequisites — check_costsplitter_data","text":"message indicating whether dataset conforms costsplitter prerequisites. Stops execution dataset conform.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/check_costsplitter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the dataset for conformity with costsplitter prerequisites — check_costsplitter_data","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(stringr) data <- data.frame(   name = c(\"Alice\", \"Bob\", \"Charlie\"),   pay_breakfast = c(20, 0, 10),   share_breakfast = c(1, \"half\", \"full\"),   age = c(30, \"kid\", NA),   adjustment = c(\"more\", NA, \"less\") )  check_costsplitter_data(data) #>      name pay_breakfast share_breakfast  age adjustment #> 1   Alice            20               1   30       more #> 2     Bob             0            half  kid       <NA> #> 3 Charlie            10            full <NA>       less"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter-package.html","id":null,"dir":"Reference","previous_headings":"","what":"costsplitter: Divide Costs Fairly Amongst Friends — costsplitter-package","title":"costsplitter: Divide Costs Fairly Amongst Friends — costsplitter-package","text":"accounting group trip.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"costsplitter: Divide Costs Fairly Amongst Friends — costsplitter-package","text":"Maintainer: Jakob Schumacher jakob.schumacher@web.de (ORCID)","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide Costs Fairly Among Participants — costsplitter","title":"Divide Costs Fairly Among Participants — costsplitter","text":"function calculates fair division costs among participants based weights. reads participants' costs' data files, calculates total costs participant group, returns amounts paid applying payments already made.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide Costs Fairly Among Participants — costsplitter","text":"","code":"costsplitter(   data = readr::read_csv(system.file(\"participants.csv\", package = \"costsplitter\"),     show_col_types = FALSE),   pay_by = \"individual\" )"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide Costs Fairly Among Participants — costsplitter","text":"data dataset pay_by string specifying whether divide costs \"group\" \"individual\". Defaults \"group\".","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide Costs Fairly Among Participants — costsplitter","text":"data frame containing final payments person group minimizing payments.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/costsplitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide Costs Fairly Among Participants — costsplitter","text":"","code":"result <- costsplitter(pay_by = \"group\")"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_costs.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide Costs Based on Weighted Factors — divide_costs","title":"Divide Costs Based on Weighted Factors — divide_costs","text":"function calculates much individual pay, based various weighted factors age group, adjustment, presence.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_costs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide Costs Based on Weighted Factors — divide_costs","text":"","code":"divide_costs(data_participants = cat_to_num(read_participants()))"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_costs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide Costs Based on Weighted Factors — divide_costs","text":"data_participants dataframe containing columns agegroup, age, adjustment, share. Default data_participants.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_costs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide Costs Based on Weighted Factors — divide_costs","text":"dataframe additional column costs_produced, representing calculated cost individual needs pay based weight.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_costs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Divide Costs Based on Weighted Factors — divide_costs","text":"function computes weight individual based : Initializing weight 1. agegroup \"kid\", weight updated weight * 0.0555 * age. weight multiplied values adjustment share columns. total cost (cost) divided based sum weights determine individual's share.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_costs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide Costs Based on Weighted Factors — divide_costs","text":"","code":"data_participants <- divide_costs()"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_fairly.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide Costs Fairly Among Participants — divide_fairly","title":"Divide Costs Fairly Among Participants — divide_fairly","text":"function calculates fair division costs among participants based weights. reads participants' costs' data files, calculates total costs participant group, returns amounts paid applying payments already made.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_fairly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide Costs Fairly Among Participants — divide_fairly","text":"","code":"divide_fairly(   participants_file = system.file(\"participants.csv\", package = \"costsplitter\"),   costs_file = system.file(\"costs.csv\", package = \"costsplitter\"),   pay_by = \"group\" )"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_fairly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide Costs Fairly Among Participants — divide_fairly","text":"participants_file Path CSV file containing participants' information. Defaults file within package. costs_file Path CSV file containing costs' information. Defaults file within package. pay_by string specifying whether divide costs \"group\" \"individual\". Defaults \"group\".","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_fairly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide Costs Fairly Among Participants — divide_fairly","text":"data frame containing final payments person group minimizing payments.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_fairly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Divide Costs Fairly Among Participants — divide_fairly","text":"function starts reading participants costs data. calculates total costs distributes based participants' weights. also considers payments already made. Depending pay_by argument, costs divided either group individual. final step involves minimizing payments using minimize_payments function.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/divide_fairly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide Costs Fairly Among Participants — divide_fairly","text":"","code":"result <- divide_fairly(pay_by = \"group\")"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/dividefair-package.html","id":null,"dir":"Reference","previous_headings":"","what":"costsplitter: Divide Costs Fairly Amongst Friends — costsplitter-package","title":"costsplitter: Divide Costs Fairly Amongst Friends — costsplitter-package","text":"accounting group trip.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/dividefair-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"costsplitter: Divide Costs Fairly Amongst Friends — costsplitter-package","text":"Maintainer: Jakob Schumacher jakob.schumacher@web.de (ORCID)","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/get_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Statistics on Participants — get_stats","title":"Get Statistics on Participants — get_stats","text":"function calculates statistics regarding number adults, children, stays, absences given data frame based agegroup share columns.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/get_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Statistics on Participants — get_stats","text":"","code":"get_stats(data_participants = read_participants())"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/get_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Statistics on Participants — get_stats","text":"data_participants data frame containing least following columns: agegroup: character vector indicating whether participant \"adult\" \"kid\". share: character vector indicating presence values \"x\" stays \"n\" absences.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/get_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Statistics on Participants — get_stats","text":"list containing: adults: total number adults data frame. children: total number children data frame.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/get_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Statistics on Participants — get_stats","text":"","code":"stats <- get_stats(read_participants())"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/minimize_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimize Payments Between persons — minimize_payments","title":"Minimize Payments Between persons — minimize_payments","text":"function finds minimum number transactions required settle balances persons persons owe money others need paid. first settles exact matches payer owes exact amount receiver needs, proceeds match payers receivers way minimizes number payments.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/minimize_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimize Payments Between persons — minimize_payments","text":"","code":"minimize_payments(df)"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/minimize_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimize Payments Between persons — minimize_payments","text":"df tibble data frame two columns: person character vector representing person IDs (e.g., names). to_pay numeric vector representing amount person needs pay (positive values) receive (negative values).","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/minimize_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimize Payments Between persons — minimize_payments","text":"tibble three columns: payer person making payment. receiver person receiving payment. amount amount money transferred.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/minimize_payments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimize Payments Between persons — minimize_payments","text":"function separates input data frame payers (persons positive balances) receivers (persons negative balances). first identifies settles exact matches payers receivers. , remaining balances, matches payers receivers way minimizes number payments.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/minimize_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimize Payments Between persons — minimize_payments","text":"","code":"df <- dplyr::tibble(   element = c(\"Brown\", \"Smith\", \"Fisher\", \"Taylor\", \"Davis\", \"Johnson\", \"Wilson\", \"ORally\"),   to_pay = c(-995, -125, -80,  210, 245, 300, 365, 80) )  minimize_payments(df) #> # A tibble: 6 × 3 #>   payer   receiver amount #>   <chr>   <chr>     <dbl> #> 1 ORally  Fisher       80 #> 2 Wilson  Brown       365 #> 3 Johnson Brown       300 #> 4 Davis   Brown       245 #> 5 Taylor  Brown        85 #> 6 Taylor  Smith       125"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_costs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Cost Data from CSV File — read_costs","title":"Read Cost Data from CSV File — read_costs","text":"function reads cost data CSV file, defaulting \"costs.csv\" file included costsplitter package.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_costs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Cost Data from CSV File — read_costs","text":"","code":"read_costs(path = system.file(\"costs.csv\", package = \"costsplitter\"))"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_costs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Cost Data from CSV File — read_costs","text":"path character string specifying path CSV file. Defaults \"costs.csv\" file included costsplitter package.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_costs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Cost Data from CSV File — read_costs","text":"tibble containing cost data read CSV file.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_costs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Cost Data from CSV File — read_costs","text":"","code":"data_costs <- costsplitter::read_costs()"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_participants.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Process Participant Data from CSV — read_participants","title":"Read and Process Participant Data from CSV — read_participants","text":"function reads CSV file containing participant data, cleans processes , returns tidy data frame. allows flexible column naming handles various CSV structures.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_participants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Process Participant Data from CSV — read_participants","text":"","code":"read_participants(   path = system.file(\"participants.csv\", package = \"costsplitter\"),   var_id = \"id\",   var_age = \"age\",   var_group = \"group\",   var_adjustment = \"adjustment\",   var_agegroup = \"agegroup\",   indicator_costs = \"cost_\",   value_adults = \"adult\",   value_kids = \"kid\" )"},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_participants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Process Participant Data from CSV — read_participants","text":"path string. file path CSV file. var_id string. name ID column CSV (default: \"id\"). var_age string. name age column CSV (default: \"age\"). var_group string. name group column CSV (default: \"group\"). var_adjustment string. name adjustment column CSV (default: \"adjustment\"). var_agegroup string. name age group column CSV (default: \"agegroup\"). indicator_costs string. prefix cost columns CSV (default: \"cost_\"). value_adults string. value use adult age groups (default: \"adult\"). value_kids string. value use kid age groups (default: \"kid\").","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_participants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Process Participant Data from CSV — read_participants","text":"tibble (data frame) containing processed participant data.","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_participants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and Process Participant Data from CSV — read_participants","text":"function performs following operations: Reads CSV file Cleans column names Renames columns based user-provided names Processes age group column, categorizing adults kids Pivots cost columns long format","code":""},{"path":"http://jakobschumacher.github.io/dividefairly/reference/read_participants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Process Participant Data from CSV — read_participants","text":"","code":"data_participants <- read_participants()"},{"path":"http://jakobschumacher.github.io/dividefairly/news/index.html","id":"package-costsplitter-05","dir":"Changelog","previous_headings":"","what":"Package costsplitter 0.5","title":"Package costsplitter 0.5","text":"First public version","code":""}]
